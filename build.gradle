/*
 * CoolDB: Embedded Database for Java
 *
 * Copyright 2021 Ken Westlund
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
}

ext {
    junitVersion = "4.4"
    junit5Version = "5.7.0"
}

group 'com.cooldb'
version '1.0'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation "junit:junit:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junit5Version}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit5Version}"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:${junit5Version}"
}

test {
    useJUnitPlatform()
}

javadoc {
    include("**/api/*")
    doLast{
        copy{
            from "src/main/java/com/cooldb/api/doc-files"
            into "$project.buildDir/docs/javadoc/com/cooldb/api/doc-files"
            include "*.html"
        }
        copy{
        }
    }
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

signing {
    def signingKey = System.getenv("SIGNING_SECRET_KEY")
    def signingPassword = System.getenv("SIGNING_SECRET_KEY_PASSWORD")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign configurations.archives
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)

            from components.java

            // create the sign pom artifact
            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }

            artifact(sourceJar) {
                classifier = 'sources'
            }
            artifact(javadocJar) {
                classifier = 'javadoc'
            }

            // create the signed artifacts
            project.tasks.signArchives.signatureFiles.each {
                artifact(it) {
                    def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                    } else {
                        classifier = null
                    }
                    extension = 'jar.asc'
                }
            }
        }
    }
    repositories {
        maven {
            name = "OSSRH"
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/kwestlund/cooldb"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'CoolDB is a pure java, zero dependency, embedded database system.'
            name 'CoolDB: Embedded Database for Java'
            url 'https://cooldb.com'
            organization {
                name 'com.cooldb'
                url 'https://cooldb.com'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/kwestlund/cooldb/issues'
            }
            licenses {
                license {
                    name 'Apache License 2.0'
                    url 'https://github.com/kwestlund/cooldb/blob/main/LICENSE.txt'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/kwestlund/cooldb'
                connection 'scm:git:git://github.com/kwestlund/cooldb.git'
                developerConnection 'scm:git:ssh://git@github.com:kwestlund/cooldb.git'
            }
            developers {
                developer {
                    name 'Ken Westlund'
                }
            }
        }
    }

    model {
        tasks.generatePomFileForMavenJavaPublication {
            destination = file("$buildDir/generated-pom.xml")
        }
        tasks.publishMavenJavaPublicationToMavenLocal {
            dependsOn project.tasks.signArchives
        }
        tasks.publishMavenJavaPublicationToGitHubPackagesRepository {
            dependsOn project.tasks.signArchives
        }
        tasks.publishMavenJavaPublicationToOSSRHRepository {
            dependsOn project.tasks.signArchives
        }
    }
}
